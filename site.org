#+TITLE: Julien Chastang
#+AUTHOR: Julien Chastang
#+EMAIL: chastang@ucar.edu
#+LANGUAGE: en
#+CREATOR: Emacs 26.1 (Org mode 9.1.6)
#+STARTUP: content

#+HUGO_BASE_DIR: .
#+HUGO_SECTION: post

* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: about
:EXPORT_HUGO_CUSTOM_FRONT_MATTER:
:EXPORT_DATE: <2019-10-18 Fri>
:END:

#+NAME: fig:figure name
#+CAPTION: me
#+ATTR_ORG: :width 200
#+ATTR_HTML: :width 200px
[[file:static/me.jpg]]

I am scientific software developer living in beautiful [[http://en.wikipedia.org/wiki/Boulder,_Colorado][Boulder, Colorado USA]]. I am passionate about the application of computing technology to science and math. I am currently employed at the [[http://www.unidata.ucar.edu][Unidata Program Center]] and have been part of the [[http://www.ucar.edu][UCAR organization]] [fn:1] since 1999 when I started here as a [[./static/student.png][student]]. I specialize in scientific data, metadata, analysis and visualization using a variety of programming languages and technologies. I am also an [[https://www.gnu.org/software/emacs/][emacs]] enthusiast.

[fn:1] The [[http://www.unidata.ucar.edu][Unidata Program Center]] (UPC) is part of the [[https://www.ucar.edu/community-programs][UCAR Community Programs]] (UCP), which is part of the [[http://www.ucar.edu][University Corporation for Atmospheric Research]] (UCAR). The most well-known organization within UCAR is the [[http://ncar.ucar.edu][National Center for Atmospheric Research]] (NCAR) partially located at the iconic [[https://scied.ucar.edu/visit/ncar-public-tours][Mesa Lab]] in Boulder.

** Contact

Contact me for work related stuff at chastang at ucar dot edu and for personal stuff at julien.c.chastang at gmail.

* Julien Chastang
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: _index
:EXPORT_HUGO_CUSTOM_FRONT_MATTER:
:END:

* Blog
** Join lines, vi-style in Emacs
:PROPERTIES:
:EXPORT_FILE_NAME: join-lines
:EXPORT_DATE: <2019-10-18 Fri>
:END:

I mostly edit in Emacs but occasionally I like to use vi. vi is often the only editor available in certain computing environments. In Emacs, I find myself missing vi's join line capability. Emacs' closest equivalent is ~M-^~ or the unintuitively named  ~delete-indentation~ function. ~M-^~ is awkward in that it joins the current line to the previous line. This behavior feels unnatural especially when joining many lines in succession where you have to go to the end of the block you want to join and repeatedly type ~M-^~.

Instead, we can write an Emacs keyboard macro to mimic the vi join line capability. I followed Mike Zamansky's [[https://youtu.be/Y1oVNBuIoXo][video]] on how to write macros. He also has a [[https://youtu.be/49kBWM3RQQ8][great YouTube channel on emacs]], by the way. Start "recording" the macro with ~C-x (~  and end it with ~C-x )~. This terminal session in the emacs ~*scratch*~ buffer should give you an idea of how I created the macro.

#+BEGIN_EXPORT html
<script id="asciicast-275378" src="https://asciinema.org/a/275378.js" async></script>
#+END_EXPORT

Name the macro you just created with ~M-x kmacro-name-last-macro~. Here, I named it ~jc/join-lines~. Capture the emacs-lisp with ~M-x insert-kbd-macro~ which may yield:

#+BEGIN_SRC emacs-lisp
  (fset 'jc/join-lines
        (lambda (&optional arg) "Keyboard macro." (interactive "p")
          (kmacro-exec-ring-item (quote ("^N^A^? ^B" 0 "%d")) arg)))
#+END_SRC

or

#+BEGIN_SRC emacs-lisp
  (fset 'jc/join-lines
        (lambda (&optional arg) "Keyboard macro." (interactive "p")
          (kmacro-exec-ring-item (quote ([14 1 backspace 32 2] 0 "%d")) arg)))
#+END_SRC

depending on your emacs terminal environment. In my situation, iTerm created the former and X11 the latter.

Note in the first code snippet, those are control characters in the quoted region (e.g., next line, beginning of line, etc.), not caret N, etc. If you simply try to copy/paste this snippet, it will not work as intended. It is best to create the macro as described here to properly capture your intention.

 Finally, let's create a global key binding.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c j") 'jc/join-lines)
#+END_SRC

You can put these snippets of emacs-lisp in your emacs initialization file to always have this macro available.

** Extending Emacs rgrep for Org Mode Only Search
:PROPERTIES:
:EXPORT_FILE_NAME: rgrep
:EXPORT_DATE: <2019-05-23 Thu>
:END:

I recently wanted to extend emacs ~rgrep~ to search within org files only. Here is what I came up with:


#+BEGIN_SRC emacs-lisp
  (defun jc/rgrep-org (regexp dir)
    "rgrep for org files only"
    (interactive
     (progn
       (grep-compute-defaults)
       (let* ((regexp (grep-read-regexp))
              (dir (read-directory-name "Base directory: "
                                        nil default-directory t)))
         (list regexp dir))))
    (rgrep regexp "*.org" dir nil))
#+END_SRC


Note that in order to get this ~jc/rgrep-org~ function to work, I had to study and borrow from the internals of ~rgrep~. In particular, the ~interactive~ form was most inspired  from studying ~grep.el.gz~.
\\
 ~M-x find-function rgrep~ for more details.

** Installing X11 Emacs with homebrew
:PROPERTIES:
:EXPORT_FILE_NAME: x11
:EXPORT_DATE: <2019-05-01 Wed>
:END:

A while back it was decided that [[https://github.com/Homebrew/homebrew-core/pull/3531#issuecomment-251857552][X11 support would be removed from homebrew-core]]. Taking matters into my own hands and in the spirit of OSS, I now [[https://github.com/julienchastang/homebrew-core/tree/x11emacs][maintain my own version for anyone who wants it]]. On MacOS, you will find homebrew-core in =/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core=.

Once you have the fork ~brew reinstall emacs --with-x11~.

I only occasionally maintain that branch so if you want something more up-to-date, be sure to rebase against ~homebrew-core/master~.

Enjoy!

** Migrating Blog to Hugo
:PROPERTIES:
:EXPORT_FILE_NAME: blog
:EXPORT_DATE:  <2018-11-02 Fri>
:END:

Revamping this site. More to come hopefully.
